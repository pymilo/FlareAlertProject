 - git init # create repository
 - git config # shows all configuration
 - git config -l # Default configuration
 - git config -l --show-origin # where all conf are safed (advanced)
 - git config --global # make changes on all global users 
 - git add file.txt
 - git commit -m "version xx"
 - git add . 
 - git add -u # Add only modified files No Untracked
 - git restore --staged file.txt # to unstage file.txt
 - git status # status of the repository
 - git log # show All who, when and tags of every commit of the project
 - git log --stat # which files were changed
 - git log file.txt # same as show but for a file
 - git log -n 5 --author=Salvador # show only the 5 last commits made by Salvador
 - git log --graph --decorate --oneline # adds lines to see branch history
 - git tag -a v0.1 -m "create dummy_file" <hash(e.g. b6f9237)>
 - git push <remote> --tags
 - git show  # all changes made in history (who, when)
 - git show file.txt # show all changes made on file.txt in history
 - git diff tagA tagB # tagA: old version and tagB: new version
 - git checkout # bring a change to my local folder from the repository
 - git reset HEAD # unstage any file you added. They return to work folder
 - git reset tag --hard # everything returns to the tag's prev version
 - git reset tag --soft # returns to prev vers but keep thing on stage
 - git push # send to a remote repository
 - git pull # brings everything from remote repo to my local repo & work folder 
 - git pull origin <localbranch> # to bring things from origin to a branch
 - git fetch # brings things to local repo but not to my work folder
 - git fetch <remote> <localbranch> # be explicit from where to where to fetch
 - git merge # merge the latest local repo with my work folder
 - git branch branch01 # creates branch01
 - git checkout branch01 # move to branch01
 - git show-branch --all # show all branches local and remote
 - gitk # showd the above history in a new super visual fancy window
 - git merge branch01 # do this from the main branch to bring branch01

 - When doing "git log file.txt", the output has a structure like
   commit cd5883626cb6cbb0fb8c3b0be1553e2fc6499fb8
   This weird number is the TAG of the commit

 - commit 5cc8319735d69010ce0c566566b181a5fc1dfb39 (HEAD -> main)
   HEAD always means that is the most recent commit in the main branch

 - When doing "git show file.txt", the diff --git a/file.txt b/file.txt
   shows the diff between the previous version (a) with HEAD (b).

 - Also when doing a "git show," the first line shows the commit tag and
   where the HEAD is pointing to in the current branch. When two branches
   have the same head, HEAD points to both in this first line of show.

 - git checkout tag file.txt brings only file.txt to my work folder.
   I can edit file.txt and add and commit it in a brand new commit.

 - git reset HEAD remove from stage any file you added. They return to
   your working directory for you to edit them, add them again and then
   submit to the local repository

 - With a git fetch, you can finish editing files locally, commit your files 
   and then do a git merge to synchronize your updates with the fetched files


Other commands to fully understand git
 - git reflog
 - git flow
 - git merge
 - git rebase
 - git checkout
 - git branch
 - git tag

